# -*- coding: utf-8 -*-
"""Experiment_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uIg7hn9HnPpDWrmUn72K_qfjigoMjErr

# LLAMA 3.2 1B Response Generation
"""

!pip install unsloth

# Import necessary libraries
import pandas as pd
from unsloth import FastLanguageModel
import torch
from datasets import Dataset
from trl import SFTTrainer
from transformers import TrainingArguments, DataCollatorForSeq2Seq, TextStreamer

# Mount Google Drive
from google.colab import drive
drive.mount('/content/drive')

# 1. Model Loading
max_seq_length = 2048
dtype = None  # Auto detection
load_in_4bit = True

model, tokenizer = FastLanguageModel.from_pretrained(
    model_name = "unsloth/Llama-3.2-1B-bnb-4bit",
    max_seq_length = max_seq_length,
    dtype = dtype,
    load_in_4bit = load_in_4bit,
)

# Add LoRA adapters
model = FastLanguageModel.get_peft_model(
    model,
    r = 16,
    target_modules = ["q_proj", "k_proj", "v_proj", "o_proj",
                      "gate_proj", "up_proj", "down_proj",],
    lora_alpha = 16,
    lora_dropout = 0,
    bias = "none",
    use_gradient_checkpointing = "unsloth",
    random_state = 3407,
    use_rslora = False,
)

# Set up chat template
from unsloth.chat_templates import get_chat_template
tokenizer = get_chat_template(tokenizer, chat_template = "llama-3.1")

# 2. Dataset Preprocessing - SIMPLIFIED APPROACH
# Load the CSV dataset
csv_path = "/content/drive/MyDrive/ACADEMICS/FYP/4. Implementation/EXPERIMENTS/DATASETS/Psych8k.csv"
df = pd.read_csv(csv_path)

# Extract the common instruction (we'll use it once as a system message)
# common_instruction = df['instruction'].iloc[0]  # They're all the same

common_instruction = "If you are a counsellor, please answer the questions based on the description of the patient."

# Create simplified conversations with just input and output
def create_simplified_conversation(row):
    # Just use input as user message and output as assistant response
    return {
        "conversations": [
            {"role": "system", "content": common_instruction},  # Use instruction just once as system message
            {"role": "user", "content": row['input']},
            {"role": "assistant", "content": row['output']}
        ]
    }

# Convert dataframe to conversations format
conversation_data = [create_simplified_conversation(row) for _, row in df.iterrows()]
dataset = Dataset.from_list(conversation_data)

# Format dataset for training
def formatting_prompts_func(examples):
    convos = examples["conversations"]
    texts = [tokenizer.apply_chat_template(convo, tokenize=False, add_generation_prompt=False) for convo in convos]
    return {"text": texts}

# Apply formatting to dataset
dataset = dataset.map(formatting_prompts_func, batched=True)

print(dataset[1])

# 3. Fine-tuning
from trl import SFTTrainer
from transformers import TrainingArguments, DataCollatorForSeq2Seq
from unsloth import is_bfloat16_supported

trainer = SFTTrainer(
    model = model,
    tokenizer = tokenizer,
    train_dataset = dataset,
    dataset_text_field = "text",
    max_seq_length = max_seq_length,
    data_collator = DataCollatorForSeq2Seq(tokenizer = tokenizer),
    dataset_num_proc = 2,
    packing = False, # Can make training 5x faster for short sequences.
    args = TrainingArguments(
        per_device_train_batch_size = 2,  # Change back to 2
        gradient_accumulation_steps = 4,
        warmup_steps = 5,  # Change back to 5
        # num_train_epochs = 1,
        max_steps = 500,  # Use max_steps instead of num_train_epochs
        learning_rate = 2e-4,
        fp16 = not torch.cuda.is_bf16_supported(),
        bf16 = torch.cuda.is_bf16_supported(),
        logging_steps = 1,  # Change back to 1
        optim = "adamw_8bit",
        weight_decay = 0.01,
        lr_scheduler_type = "linear",
        seed = 3407,
        output_dir = "outputs",
        report_to = "none",
    ),
)

# Train the model on responses only
from unsloth.chat_templates import train_on_responses_only
trainer = train_on_responses_only(
    trainer,
    instruction_part = "<|start_header_id|>user<|end_header_id|>\n\n",
    response_part = "<|start_header_id|>assistant<|end_header_id|>\n\n",
)

# Start training
trainer_stats = trainer.train()

# 4. Save the model
# Save locally
model.save_pretrained("llama_3_2_1b_finetuned")
tokenizer.save_pretrained("llama_3_2_1b_finetuned")

import shutil
import os

# Define source directory
source_dir = "/content/llama_3_2_1b_finetuned"

# Define destination directory in Google Drive
destination_dir = "/content/drive/MyDrive/ACADEMICS/FYP/4. Implementation/EXPERIMENTS/Experiment 1- Llama 3.2 1B Vs 3B /MODEL EXP1M1"  # Change this to your preferred location

# Ensure the destination directory exists
os.makedirs(destination_dir, exist_ok=True)

shutil.copytree(source_dir, destination_dir, dirs_exist_ok=True)

# 5. Inference
FastLanguageModel.for_inference(model)  # Enable faster inference

# Sample inference with counselor context
def generate_response(patient_input):
    messages = [
        {"role": "system", "content": common_instruction},  # Add the counselor instruction once
        {"role": "user", "content": patient_input},
    ]
    inputs = tokenizer.apply_chat_template(
        messages,
        tokenize=True,
        add_generation_prompt=True,
        return_tensors="pt",
    ).to("cuda")

    text_streamer = TextStreamer(tokenizer, skip_prompt=True)
    _ = model.generate(
        input_ids=inputs,
        streamer=text_streamer,
        max_new_tokens=256,
        use_cache=True,
        temperature=0.7,
        top_p=0.9
    )

# Example usage
generate_response("I've been feeling anxious lately and I'm not sure how to handle it.")

# NEW NEW Response GENERATION

import pandas as pd
import torch
import re
from transformers import TextStreamer
from unsloth import FastLanguageModel
from peft import PeftModel
import csv
from tqdm import tqdm

# Load the CSV file with patient issues
input_csv_path = "/content/drive/MyDrive/ACADEMICS/FYP/4. Implementation/EXPERIMENTS/DATASETS/100 Issues from psych8k.csv"
output_csv_path = "/content/drive/MyDrive/ACADEMICS/FYP/4. Implementation/EXPERIMENTS/Experiment 1- Llama 3.2 1B Vs 3B /EXP1_Model_1_Output.csv"

# Model configuration
adapter_path = "/content/drive/MyDrive/ACADEMICS/FYP/4. Implementation/EXPERIMENTS/Experiment 1- Llama 3.2 1B Vs 3B /MODEL EXP1M1"
base_model_name = "unsloth/llama-3.2-1b-bnb-4bit"  # From your adapter_config.json
max_seq_length = 2048
dtype = None
load_in_4bit = True

# Load base model first
print("Loading base model...")
model, tokenizer = FastLanguageModel.from_pretrained(
    base_model_name,
    max_seq_length=max_seq_length,
    load_in_4bit=load_in_4bit
)

# Load LoRA adapter
print("Loading adapter...")
model = PeftModel.from_pretrained(model, adapter_path)

# Enable faster inference
print("Optimizing for inference...")
FastLanguageModel.for_inference(model)

# Define the counselor system message
counselor_instruction = "If you are a counsellor, please answer the questions based on the description of the patient."

# Function to format messages manually (instead of using apply_chat_template)
def format_prompt(system_message, user_message):
    prompt = f"<|start_header_id|>system<|end_header_id|>\n{system_message}\n\n"
    prompt += f"<|start_header_id|>user<|end_header_id|>\n{user_message}\n\n"
    prompt += "<|start_header_id|>assistant<|end_header_id|>\n"
    return prompt

# Function to generate response with improved cleaning
def generate_counselor_response(patient_context):
    # Format the prompt manually
    formatted_prompt = format_prompt(counselor_instruction, patient_context)

    # Tokenize the formatted prompt
    inputs = tokenizer(formatted_prompt, return_tensors="pt").to("cuda")

    # Generate response
    outputs = model.generate(
        **inputs,
        max_new_tokens=256,
        use_cache=True,
        temperature=0.7,
        top_p=0.9,
        repetition_penalty=1.1,
        do_sample=True,
        eos_token_id=tokenizer.eos_token_id
    )

    # Decode the full output
    full_response = tokenizer.decode(outputs[0], skip_special_tokens=False)

    # Extract just the assistant's response
    if "<|start_header_id|>assistant<|end_header_id|>" in full_response:
        response = full_response.split("<|start_header_id|>assistant<|end_header_id|>")[1].strip()
    else:
        response = full_response.split(patient_context)[-1].strip()

    # Clean up any special tokens
    response = re.sub(r'<\|.*?\|>', '', response)

    # Remove anything that looks like a user response or special token
    user_pattern = r'(\buser\b|<\|start_header_id\|>user)'
    if re.search(user_pattern, response, re.IGNORECASE):
        response = re.split(user_pattern, response, flags=re.IGNORECASE)[0].strip()

    # Remove any remaining special tokens or reserved token patterns
    response = re.sub(r'<\|reserved_special_token_\d+\|>', '', response)
    response = re.sub(r'<\|eot_id\|>', '', response)

    return response

# Read the CSV file
try:
    df = pd.read_csv(input_csv_path)
    print(f"Successfully loaded {len(df)} issues from CSV.")
except Exception as e:
    print(f"Error loading CSV: {e}")
    # Create empty DataFrame with required columns
    df = pd.DataFrame({"input": [], "output": []})

# Create a new column for generated responses
df['generated_responses'] = ""

# Process each input and generate a response
for i, row in tqdm(df.iterrows(), total=len(df), desc="Generating responses"):
    context = row['input']
    if isinstance(context, str) and context.strip():  # Check if context is valid
        try:
            response = generate_counselor_response(context)
            df.at[i, 'generated_responses'] = response
        except Exception as e:
            print(f"Error generating response for row {i}: {e}")
            df.at[i, 'generated_responses'] = f"Error: {str(e)}"
    else:
        df.at[i, 'generated_responses'] = "No valid input provided"

# Save the results to a new CSV file
df[['input', 'output', 'generated_responses']].to_csv(output_csv_path, index=False)
print(f"Responses saved to {output_csv_path}")

# Display the first few results
print("\nSample of generated responses:")
for i in range(min(3, len(df))):
    print(f"\nIssue {i+1}:")
    print(f"Input: {df['input'].iloc[i][:100]}...")
    print(f"Human output: {df['output'].iloc[i][:100]}...")
    print(f"Generated response: {df['generated_responses'].iloc[i][:100]}...")

"""# LLAMA 3.2 3B Response Generation"""

!pip install unsloth

# Import necessary libraries
import pandas as pd
from unsloth import FastLanguageModel
import torch
from datasets import Dataset
from trl import SFTTrainer
from transformers import TrainingArguments, DataCollatorForSeq2Seq, TextStreamer

# Mount Google Drive
from google.colab import drive
drive.mount('/content/drive')

# 1. Model Loading
max_seq_length = 2048
dtype = None  # Auto detection
load_in_4bit = True

model, tokenizer = FastLanguageModel.from_pretrained(
    model_name = "unsloth/Llama-3.2-3B-bnb-4bit",
    max_seq_length = max_seq_length,
    dtype = dtype,
    load_in_4bit = load_in_4bit,
)

# Add LoRA adapters
model = FastLanguageModel.get_peft_model(
    model,
    r = 16,
    target_modules = ["q_proj", "k_proj", "v_proj", "o_proj",
                      "gate_proj", "up_proj", "down_proj",],
    lora_alpha = 16,
    lora_dropout = 0,
    bias = "none",
    use_gradient_checkpointing = "unsloth",
    random_state = 3407,
    use_rslora = False,
)

# Set up chat template
from unsloth.chat_templates import get_chat_template
tokenizer = get_chat_template(tokenizer, chat_template = "llama-3.1")

# 2. Dataset Preprocessing - SIMPLIFIED APPROACH
# Load the CSV dataset
csv_path = "/content/drive/MyDrive/ACADEMICS/FYP/4. Implementation/EXPERIMENTS/DATASETS/Psych8k.csv"
df = pd.read_csv(csv_path)

# Extract the common instruction (we'll use it once as a system message)
# common_instruction = df['instruction'].iloc[0]  # They're all the same

common_instruction = "If you are a counsellor, please answer the questions based on the description of the patient."

# Create simplified conversations with just input and output
def create_simplified_conversation(row):
    # Just use input as user message and output as assistant response
    return {
        "conversations": [
            {"role": "system", "content": common_instruction},  # Use instruction just once as system message
            {"role": "user", "content": row['input']},
            {"role": "assistant", "content": row['output']}
        ]
    }

# Convert dataframe to conversations format
conversation_data = [create_simplified_conversation(row) for _, row in df.iterrows()]
dataset = Dataset.from_list(conversation_data)

# Format dataset for training
def formatting_prompts_func(examples):
    convos = examples["conversations"]
    texts = [tokenizer.apply_chat_template(convo, tokenize=False, add_generation_prompt=False) for convo in convos]
    return {"text": texts}

# Apply formatting to dataset
dataset = dataset.map(formatting_prompts_func, batched=True)

print(dataset[3])

# 3. Fine-tuning
from trl import SFTTrainer
from transformers import TrainingArguments, DataCollatorForSeq2Seq
from unsloth import is_bfloat16_supported

trainer = SFTTrainer(
    model = model,
    tokenizer = tokenizer,
    train_dataset = dataset,
    dataset_text_field = "text",
    max_seq_length = max_seq_length,
    data_collator = DataCollatorForSeq2Seq(tokenizer = tokenizer),
    dataset_num_proc = 2,
    packing = False, # Can make training 5x faster for short sequences.
    args = TrainingArguments(
        per_device_train_batch_size = 2,  # Change back to 2
        gradient_accumulation_steps = 4,
        warmup_steps = 5,  # Change back to 5
        # num_train_epochs = 1,
        max_steps = 500,  # Use max_steps instead of num_train_epochs
        learning_rate = 2e-4,
        fp16 = not torch.cuda.is_bf16_supported(),
        bf16 = torch.cuda.is_bf16_supported(),
        logging_steps = 1,  # Change back to 1
        optim = "adamw_8bit",
        weight_decay = 0.01,
        lr_scheduler_type = "linear",
        seed = 3407,
        output_dir = "outputs",
        report_to = "none",
    ),
)

# Train the model on responses only
from unsloth.chat_templates import train_on_responses_only
trainer = train_on_responses_only(
    trainer,
    instruction_part = "<|start_header_id|>user<|end_header_id|>\n\n",
    response_part = "<|start_header_id|>assistant<|end_header_id|>\n\n",
)

# Start training
trainer_stats = trainer.train()

# 4. Save the model
# Save locally
model.save_pretrained("llama_3_2_3b_finetuned")
tokenizer.save_pretrained("llama_3_2_3b_finetuned")

import shutil
import os

# Define source directory
source_dir = "/content/llama_3_2_3b_finetuned"

# Define destination directory in Google Drive
destination_dir = "/content/drive/MyDrive/ACADEMICS/FYP/4. Implementation/EXPERIMENTS/Experiment 1- Llama 3.2 1B Vs 3B /MODEL EXP1M2"  # Change this to your preferred location

# Ensure the destination directory exists
os.makedirs(destination_dir, exist_ok=True)

shutil.copytree(source_dir, destination_dir, dirs_exist_ok=True)

# 5. Inference
FastLanguageModel.for_inference(model)  # Enable faster inference

# Sample inference with counselor context
def generate_response(patient_input):
    messages = [
        {"role": "system", "content": common_instruction},  # Add the counselor instruction once
        {"role": "user", "content": patient_input},
    ]
    inputs = tokenizer.apply_chat_template(
        messages,
        tokenize=True,
        add_generation_prompt=True,
        return_tensors="pt",
    ).to("cuda")

    text_streamer = TextStreamer(tokenizer, skip_prompt=True)
    _ = model.generate(
        input_ids=inputs,
        streamer=text_streamer,
        max_new_tokens=256,
        use_cache=True,
        temperature=0.7,
        top_p=0.9
    )

# Example usage
generate_response("I've been feeling anxious lately and I'm not sure how to handle it.")

# NEW NEW Response GENERATION

import pandas as pd
import torch
import re
from transformers import TextStreamer
from unsloth import FastLanguageModel
from peft import PeftModel
import csv
from tqdm import tqdm

# Load the CSV file with patient issues
input_csv_path = "/content/drive/MyDrive/ACADEMICS/FYP/4. Implementation/EXPERIMENTS/DATASETS/100 Issues from psych8k.csv"
output_csv_path = "/content/drive/MyDrive/ACADEMICS/FYP/4. Implementation/EXPERIMENTS/Experiment 1- Llama 3.2 1B Vs 3B /EXP1_Model_2_Output.csv"

# Model configuration
adapter_path = "/content/drive/MyDrive/ACADEMICS/FYP/4. Implementation/EXPERIMENTS/Experiment 1- Llama 3.2 1B Vs 3B /MODEL EXP1M2"
base_model_name = "unsloth/llama-3.2-3b-bnb-4bit"  # From your adapter_config.json
max_seq_length = 2048
dtype = None
load_in_4bit = True

# Load base model first
print("Loading base model...")
model, tokenizer = FastLanguageModel.from_pretrained(
    base_model_name,
    max_seq_length=max_seq_length,
    load_in_4bit=load_in_4bit
)

# Load LoRA adapter
print("Loading adapter...")
model = PeftModel.from_pretrained(model, adapter_path)

# Enable faster inference
print("Optimizing for inference...")
FastLanguageModel.for_inference(model)

# Define the counselor system message
counselor_instruction = "If you are a counsellor, please answer the questions based on the description of the patient."

# Function to format messages manually (instead of using apply_chat_template)
def format_prompt(system_message, user_message):
    prompt = f"<|start_header_id|>system<|end_header_id|>\n{system_message}\n\n"
    prompt += f"<|start_header_id|>user<|end_header_id|>\n{user_message}\n\n"
    prompt += "<|start_header_id|>assistant<|end_header_id|>\n"
    return prompt

# Function to generate response with improved cleaning
def generate_counselor_response(patient_context):
    # Format the prompt manually
    formatted_prompt = format_prompt(counselor_instruction, patient_context)

    # Tokenize the formatted prompt
    inputs = tokenizer(formatted_prompt, return_tensors="pt").to("cuda")

    # Generate response
    outputs = model.generate(
        **inputs,
        max_new_tokens=256,
        use_cache=True,
        temperature=0.7,
        top_p=0.9,
        repetition_penalty=1.1,
        do_sample=True,
        eos_token_id=tokenizer.eos_token_id
    )

    # Decode the full output
    full_response = tokenizer.decode(outputs[0], skip_special_tokens=False)

    # Extract just the assistant's response
    if "<|start_header_id|>assistant<|end_header_id|>" in full_response:
        response = full_response.split("<|start_header_id|>assistant<|end_header_id|>")[1].strip()
    else:
        response = full_response.split(patient_context)[-1].strip()

    # Clean up any special tokens
    response = re.sub(r'<\|.*?\|>', '', response)

    # Remove anything that looks like a user response or special token
    user_pattern = r'(\buser\b|<\|start_header_id\|>user)'
    if re.search(user_pattern, response, re.IGNORECASE):
        response = re.split(user_pattern, response, flags=re.IGNORECASE)[0].strip()

    # Remove any remaining special tokens or reserved token patterns
    response = re.sub(r'<\|reserved_special_token_\d+\|>', '', response)
    response = re.sub(r'<\|eot_id\|>', '', response)

    return response

# Read the CSV file
try:
    df = pd.read_csv(input_csv_path)
    print(f"Successfully loaded {len(df)} issues from CSV.")
except Exception as e:
    print(f"Error loading CSV: {e}")
    # Create empty DataFrame with required columns
    df = pd.DataFrame({"input": [], "output": []})

# Create a new column for generated responses
df['generated_responses'] = ""

# Process each input and generate a response
for i, row in tqdm(df.iterrows(), total=len(df), desc="Generating responses"):
    context = row['input']
    if isinstance(context, str) and context.strip():  # Check if context is valid
        try:
            response = generate_counselor_response(context)
            df.at[i, 'generated_responses'] = response
        except Exception as e:
            print(f"Error generating response for row {i}: {e}")
            df.at[i, 'generated_responses'] = f"Error: {str(e)}"
    else:
        df.at[i, 'generated_responses'] = "No valid input provided"

# Save the results to a new CSV file
df[['input', 'output', 'generated_responses']].to_csv(output_csv_path, index=False)
print(f"Responses saved to {output_csv_path}")

# Display the first few results
print("\nSample of generated responses:")
for i in range(min(3, len(df))):
    print(f"\nIssue {i+1}:")
    print(f"Input: {df['input'].iloc[i][:100]}...")
    print(f"Human output: {df['output'].iloc[i][:100]}...")
    print(f"Generated response: {df['generated_responses'].iloc[i][:100]}...")

"""# Model Evaluation"""

# Step 1: Install Required Libraries
!pip install -q sentence-transformers transformers torch pandas matplotlib seaborn scikit-learn

# Step 2: Import Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sentence_transformers import SentenceTransformer
from sklearn.metrics.pairwise import cosine_similarity
from transformers import AutoTokenizer, AutoModelForSequenceClassification
import torch
from tqdm.notebook import tqdm
import re

# Step 3: Define Functions
def load_and_clean_data(file_path):
    """Load CSV and clean the data for analysis"""
    print("Loading data...")
    df = pd.read_csv(file_path)

    # Remove rows with missing values or problematic generated responses
    df = df.dropna(subset=['input', 'output', 'generated_responses'])

    # Clean text (remove special characters, strange tokens)
    def clean_text(text):
        if not isinstance(text, str):
            return ""
        # Remove special characters and strange tokens
        text = re.sub(r'[^\w\s.,!?:;()\-\'"]', ' ', text)
        # Remove multiple spaces
        text = re.sub(r'\s+', ' ', text)
        return text.strip()

    df['clean_output'] = df['output'].apply(clean_text)
    df['clean_generated'] = df['generated_responses'].apply(clean_text)

    # Filter out rows with empty cleaned responses
    df = df[(df['clean_output'] != "") & (df['clean_generated'] != "")]

    print(f"Data loaded. {len(df)} valid responses found.")
    return df

def compute_similarities(df):
    """Calculate similarity between real and generated responses"""
    print("Computing similarities...")

    # Load sentence transformer model
    model = SentenceTransformer('all-MiniLM-L6-v2')

    # Generate embeddings
    real_embeddings = model.encode(df['clean_output'].tolist(), show_progress_bar=True)
    gen_embeddings = model.encode(df['clean_generated'].tolist(), show_progress_bar=True)

    # Calculate cosine similarities
    similarities = []
    for i in range(len(real_embeddings)):
        sim = cosine_similarity([real_embeddings[i]], [gen_embeddings[i]])[0][0]
        similarities.append(sim)

    df['similarity_score'] = similarities

    print(f"Average similarity score: {np.mean(similarities):.4f}")
    return df

def score_empathy(df):
    """Score empathy in responses using pre-trained emotion detection models"""
    print("Scoring empathy...")

    # Load emotion detection model
    model_name = "j-hartmann/emotion-english-distilroberta-base" # More suitable model for empathy detection
    try:
        tokenizer = AutoTokenizer.from_pretrained(model_name)
        model = AutoModelForSequenceClassification.from_pretrained(model_name)

        # Function to calculate empathy score based on emotion detection
        def get_empathy_score(text):
            if not text or len(text) < 10:  # Skip very short texts
                return 0.0

            # Truncate long texts to prevent tokenizer errors
            if len(text) > 512:
                text = text[:512]

            inputs = tokenizer(text, return_tensors="pt", truncation=True, max_length=512)
            with torch.no_grad():
                outputs = model(**inputs)

            # Get scores for empathetic emotions (joy, sadness, caring, etc.)
            # The model returns scores for each emotion, we'll weight some emotions higher for empathy
            probabilities = torch.softmax(outputs.logits, dim=1)[0]

            # These indices represent emotions that are indicators of empathy (sadness, joy, love, caring, surprise)
            # Different emotions have different weights for empathy
            emotion_weights = {
                'joy': 0.6,
                'sadness': 0.8,  # Higher weight as expressing understanding of sadness indicates empathy
                'love': 0.9,
                'surprise': 0.5,
                'fear': 0.4,
                'anger': 0.2  # Lower weight as anger is less associated with empathy
            }

            # Get label-to-id mapping
            label2id = tokenizer.config.label2id

            # Calculate weighted empathy score
            empathy_score = 0
            total_weight = 0

            for emotion, weight in emotion_weights.items():
                if emotion in label2id:
                    idx = label2id[emotion]
                    empathy_score += probabilities[idx].item() * weight
                    total_weight += weight

            # Normalize by total weight
            if total_weight > 0:
                empathy_score /= total_weight

            return empathy_score

        # Score empathy for real and generated responses
        df['real_empathy'] = df['clean_output'].apply(get_empathy_score)
        df['generated_empathy'] = df['clean_generated'].apply(get_empathy_score)

        print(f"Average real empathy score: {df['real_empathy'].mean():.4f}")
        print(f"Average generated empathy score: {df['generated_empathy'].mean():.4f}")

    except Exception as e:
        print(f"Error loading emotion model: {e}")
        print("Falling back to simpler empathy keyword detection...")

        # Keyword-based empathy detection as fallback
        empathy_keywords = [
            'understand', 'feel', 'hear you', 'sounds like',
            'must be', 'difficult', 'challenging', 'appreciate',
            'thank you for sharing', 'imagine', 'perspective'
        ]

        def simple_empathy_score(text):
            if not isinstance(text, str):
                return 0.0
            text = text.lower()
            # Count empathy keywords
            count = sum(1 for keyword in empathy_keywords if keyword in text)
            # Normalize by text length and keyword count
            score = min(count / (len(empathy_keywords) * 0.3), 1.0)
            return score

        df['real_empathy'] = df['clean_output'].apply(simple_empathy_score)
        df['generated_empathy'] = df['clean_generated'].apply(simple_empathy_score)

        print(f"Average real empathy score (keyword-based): {df['real_empathy'].mean():.4f}")
        print(f"Average generated empathy score (keyword-based): {df['generated_empathy'].mean():.4f}")

    return df

def visualize_results(df):
    """Create visualizations for the comparison results"""
    print("Creating visualizations...")

    # Set up the figure
    plt.figure(figsize=(15, 10))

    # Plot 1: Similarity Distribution
    plt.subplot(2, 2, 1)
    sns.histplot(df['similarity_score'], kde=True)
    plt.title('Distribution of Similarity Scores')
    plt.xlabel('Similarity Score')
    plt.ylabel('Frequency')

    # Plot 2: Empathy Comparison
    plt.subplot(2, 2, 2)
    data = pd.DataFrame({
        'Real Therapist': df['real_empathy'],
        'LLM Generated': df['generated_empathy']
    })
    sns.boxplot(data=data)
    plt.title('Empathy Score Comparison')
    plt.ylabel('Empathy Score')

    # Plot 3: Similarity vs Real Empathy
    plt.subplot(2, 2, 3)
    sns.scatterplot(x='similarity_score', y='real_empathy', data=df)
    plt.title('Similarity vs Real Empathy')
    plt.xlabel('Similarity Score')
    plt.ylabel('Real Therapist Empathy Score')

    # Plot 4: Similarity vs Generated Empathy
    plt.subplot(2, 2, 4)
    sns.scatterplot(x='similarity_score', y='generated_empathy', data=df)
    plt.title('Similarity vs Generated Empathy')
    plt.xlabel('Similarity Score')
    plt.ylabel('LLM Generated Empathy Score')

    plt.tight_layout()
    plt.savefig('therapy_response_evaluation.png')
    plt.show()

    # Create a summary table
    summary = pd.DataFrame({
        'Metric': ['Average Similarity', 'Average Real Empathy', 'Average Generated Empathy',
                   'Empathy Gap (Real - Generated)'],
        'Value': [
            df['similarity_score'].mean(),
            df['real_empathy'].mean(),
            df['generated_empathy'].mean(),
            df['real_empathy'].mean() - df['generated_empathy'].mean()
        ]
    })

    display(summary)

    # Additional analysis: Find examples of high/low empathy responses
    df_sorted = df.sort_values('generated_empathy', ascending=False)

    print("\nTop 3 Most Empathetic Generated Responses:")
    for i in range(min(3, len(df_sorted))):
        idx = df_sorted.index[i]
        print(f"\nInput: {df_sorted['input'].iloc[i][:100]}...")
        print(f"Generated Response: {df_sorted['clean_generated'].iloc[i][:100]}...")
        print(f"Empathy Score: {df_sorted['generated_empathy'].iloc[i]:.4f}")

    df_sorted = df.sort_values('generated_empathy')

    print("\nBottom 3 Least Empathetic Generated Responses:")
    for i in range(min(3, len(df_sorted))):
        idx = df_sorted.index[i]
        print(f"\nInput: {df_sorted['input'].iloc[i][:100]}...")
        print(f"Generated Response: {df_sorted['clean_generated'].iloc[i][:100]}...")
        print(f"Empathy Score: {df_sorted['generated_empathy'].iloc[i]:.4f}")

# Step 4: Direct Execution
# File path
file_path = "/content/responses_with_human_output.csv"

# Process data and analyze
print("Starting evaluation process...")
df = load_and_clean_data(file_path)
df = compute_similarities(df)

# Score empathy using our robust method
df = score_empathy(df)

# Visualize the results
visualize_results(df)

# Save results
df.to_csv('evaluated_responses.csv', index=False)
print("Evaluation complete. Results saved to 'evaluated_responses.csv'")