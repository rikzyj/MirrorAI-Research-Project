# -*- coding: utf-8 -*-
"""Experiment_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ntpTVuCEo8ahxRyIg8j-4mvDiy3COSvC

# LLAMA 3.2 1B Response Generation for LORA Rank
```
r=8,r=16,r=32
```
"""

!pip install unsloth

# Import necessary libraries
import pandas as pd
from unsloth import FastLanguageModel
import torch
from datasets import Dataset
from trl import SFTTrainer
from transformers import TrainingArguments, DataCollatorForSeq2Seq, TextStreamer

# Mount Google Drive
from google.colab import drive
drive.mount('/content/drive')

# 1. Model Loading
max_seq_length = 2048
dtype = None  # Auto detection
load_in_4bit = True

model, tokenizer = FastLanguageModel.from_pretrained(
    model_name = "unsloth/Llama-3.2-1B-bnb-4bit",
    max_seq_length = max_seq_length,
    dtype = dtype,
    load_in_4bit = load_in_4bit,
)

# Add LoRA adapters
model = FastLanguageModel.get_peft_model(
    model,
    r = 32, #change r values 8, 16, 32
    target_modules = ["q_proj", "k_proj", "v_proj", "o_proj",
                      "gate_proj", "up_proj", "down_proj",],
    lora_alpha = 16,
    lora_dropout = 0,
    bias = "none",
    use_gradient_checkpointing = "unsloth",
    random_state = 3407,
    use_rslora = False,
)

# Set up chat template
from unsloth.chat_templates import get_chat_template
tokenizer = get_chat_template(tokenizer, chat_template = "llama-3.1")

from google.colab import drive
drive.mount('/content/drive')

# 2. Dataset Preprocessing - SIMPLIFIED APPROACH
# Load the CSV dataset
csv_path = "/content/drive/MyDrive/ACADEMICS/FYP/4. Implementation/EXPERIMENTS/DATASETS/Psych8k.csv"
df = pd.read_csv(csv_path)

# Extract the common instruction (we'll use it once as a system message)
# common_instruction = df['instruction'].iloc[0]  # They're all the same

common_instruction = "If you are a counsellor, please answer the questions based on the description of the patient."

# Create simplified conversations with just input and output
def create_simplified_conversation(row):
    # Just use input as user message and output as assistant response
    return {
        "conversations": [
            {"role": "system", "content": common_instruction},  # Use instruction just once as system message
            {"role": "user", "content": row['input']},
            {"role": "assistant", "content": row['output']}
        ]
    }

# Convert dataframe to conversations format
conversation_data = [create_simplified_conversation(row) for _, row in df.iterrows()]
dataset = Dataset.from_list(conversation_data)

# Format dataset for training
def formatting_prompts_func(examples):
    convos = examples["conversations"]
    texts = [tokenizer.apply_chat_template(convo, tokenize=False, add_generation_prompt=False) for convo in convos]
    return {"text": texts}

# Apply formatting to dataset
dataset = dataset.map(formatting_prompts_func, batched=True)

print(dataset[1])

# 3. Fine-tuning
from trl import SFTTrainer
from transformers import TrainingArguments, DataCollatorForSeq2Seq
from unsloth import is_bfloat16_supported

trainer = SFTTrainer(
    model = model,
    tokenizer = tokenizer,
    train_dataset = dataset,
    dataset_text_field = "text",
    max_seq_length = max_seq_length,
    data_collator = DataCollatorForSeq2Seq(tokenizer = tokenizer),
    dataset_num_proc = 2,
    packing = False, # Can make training 5x faster for short sequences.
    args = TrainingArguments(
        per_device_train_batch_size = 2,  # Change back to 2
        gradient_accumulation_steps = 4,
        warmup_steps = 5,  # Change back to 5
        # num_train_epochs = 1,
        max_steps = 500,  # Use max_steps instead of num_train_epochs
        learning_rate = 2e-4,
        fp16 = not torch.cuda.is_bf16_supported(),
        bf16 = torch.cuda.is_bf16_supported(),
        logging_steps = 1,  # Change back to 1
        optim = "adamw_8bit",
        weight_decay = 0.01,
        lr_scheduler_type = "linear",
        seed = 3407,
        output_dir = "outputs",
        report_to = "none",
    ),
)

# Train the model on responses only
from unsloth.chat_templates import train_on_responses_only
trainer = train_on_responses_only(
    trainer,
    instruction_part = "<|start_header_id|>user<|end_header_id|>\n\n",
    response_part = "<|start_header_id|>assistant<|end_header_id|>\n\n",
)

# Start training
trainer_stats = trainer.train()

# 4. Save the model
# Save locally
model.save_pretrained("llama_3_2_1b_finetuned")
tokenizer.save_pretrained("llama_3_2_1b_finetuned")

import shutil
import os

# Define source directory
source_dir = "/content/llama_3_2_1b_finetuned"

# Define destination directory in Google Drive
destination_dir = "/content/drive/MyDrive/ACADEMICS/FYP/4. Implementation/EXPERIMENTS/Experiment 2 - LORA RANK/MODEL EXP2M3"  # Change this to your preferred location

# Ensure the destination directory exists
os.makedirs(destination_dir, exist_ok=True)

shutil.copytree(source_dir, destination_dir, dirs_exist_ok=True)

# 5. Inference
FastLanguageModel.for_inference(model)  # Enable faster inference

# Sample inference with counselor context
def generate_response(patient_input):
    messages = [
        {"role": "system", "content": common_instruction},  # Add the counselor instruction once
        {"role": "user", "content": patient_input},
    ]
    inputs = tokenizer.apply_chat_template(
        messages,
        tokenize=True,
        add_generation_prompt=True,
        return_tensors="pt",
    ).to("cuda")

    text_streamer = TextStreamer(tokenizer, skip_prompt=True)
    _ = model.generate(
        input_ids=inputs,
        streamer=text_streamer,
        max_new_tokens=256,
        use_cache=True,
        temperature=0.7,
        top_p=0.9
    )

# Example usage
generate_response("I've been feeling anxious lately and I'm not sure how to handle it.")

# NEW NEW Response GENERATION

import pandas as pd
import torch
import re
from transformers import TextStreamer
from unsloth import FastLanguageModel
from peft import PeftModel
import csv
from tqdm import tqdm

# Load the CSV file with patient issues
input_csv_path = "/content/drive/MyDrive/ACADEMICS/FYP/4. Implementation/EXPERIMENTS/DATASETS/100 Issues from psych8k.csv"
output_csv_path = "/content/drive/MyDrive/ACADEMICS/FYP/4. Implementation/EXPERIMENTS/Experiment 2 - LORA RANK/EXP2_Model_3_R32_Output.csv"

# Model configuration
adapter_path = "/content/drive/MyDrive/ACADEMICS/FYP/4. Implementation/EXPERIMENTS/Experiment 2 - LORA RANK/MODEL EXP2M3"
base_model_name = "unsloth/llama-3.2-1b-bnb-4bit"  # From your adapter_config.json
max_seq_length = 2048
dtype = None
load_in_4bit = True

# Load base model first
print("Loading base model...")
model, tokenizer = FastLanguageModel.from_pretrained(
    base_model_name,
    max_seq_length=max_seq_length,
    load_in_4bit=load_in_4bit
)

# Load LoRA adapter
print("Loading adapter...")
model = PeftModel.from_pretrained(model, adapter_path)

# Enable faster inference
print("Optimizing for inference...")
FastLanguageModel.for_inference(model)

# Define the counselor system message
counselor_instruction = "If you are a counsellor, please answer the questions based on the description of the patient."

# Function to format messages manually (instead of using apply_chat_template)
def format_prompt(system_message, user_message):
    prompt = f"<|start_header_id|>system<|end_header_id|>\n{system_message}\n\n"
    prompt += f"<|start_header_id|>user<|end_header_id|>\n{user_message}\n\n"
    prompt += "<|start_header_id|>assistant<|end_header_id|>\n"
    return prompt

# Function to generate response with improved cleaning
def generate_counselor_response(patient_context):
    # Format the prompt manually
    formatted_prompt = format_prompt(counselor_instruction, patient_context)

    # Tokenize the formatted prompt
    inputs = tokenizer(formatted_prompt, return_tensors="pt").to("cuda")

    # Generate response
    outputs = model.generate(
        **inputs,
        max_new_tokens=256,
        use_cache=True,
        temperature=0.7,
        top_p=0.9,
        repetition_penalty=1.1,
        do_sample=True,
        eos_token_id=tokenizer.eos_token_id
    )

    # Decode the full output
    full_response = tokenizer.decode(outputs[0], skip_special_tokens=False)

    # Extract just the assistant's response
    if "<|start_header_id|>assistant<|end_header_id|>" in full_response:
        response = full_response.split("<|start_header_id|>assistant<|end_header_id|>")[1].strip()
    else:
        response = full_response.split(patient_context)[-1].strip()

    # Clean up any special tokens
    response = re.sub(r'<\|.*?\|>', '', response)

    # Remove anything that looks like a user response or special token
    user_pattern = r'(\buser\b|<\|start_header_id\|>user)'
    if re.search(user_pattern, response, re.IGNORECASE):
        response = re.split(user_pattern, response, flags=re.IGNORECASE)[0].strip()

    # Remove any remaining special tokens or reserved token patterns
    response = re.sub(r'<\|reserved_special_token_\d+\|>', '', response)
    response = re.sub(r'<\|eot_id\|>', '', response)

    return response

# Read the CSV file
try:
    df = pd.read_csv(input_csv_path)
    print(f"Successfully loaded {len(df)} issues from CSV.")
except Exception as e:
    print(f"Error loading CSV: {e}")
    # Create empty DataFrame with required columns
    df = pd.DataFrame({"input": [], "output": []})

# Create a new column for generated responses
df['generated_responses'] = ""

# Process each input and generate a response
for i, row in tqdm(df.iterrows(), total=len(df), desc="Generating responses"):
    context = row['input']
    if isinstance(context, str) and context.strip():  # Check if context is valid
        try:
            response = generate_counselor_response(context)
            df.at[i, 'generated_responses'] = response
        except Exception as e:
            print(f"Error generating response for row {i}: {e}")
            df.at[i, 'generated_responses'] = f"Error: {str(e)}"
    else:
        df.at[i, 'generated_responses'] = "No valid input provided"

# Save the results to a new CSV file
df[['input', 'output', 'generated_responses']].to_csv(output_csv_path, index=False)
print(f"Responses saved to {output_csv_path}")

# Display the first few results
print("\nSample of generated responses:")
for i in range(min(3, len(df))):
    print(f"\nIssue {i+1}:")
    print(f"Input: {df['input'].iloc[i][:100]}...")
    print(f"Human output: {df['output'].iloc[i][:100]}...")
    print(f"Generated response: {df['generated_responses'].iloc[i][:100]}...")