# -*- coding: utf-8 -*-
"""[WORKING1...] Llama3.2_(1B_and_3B)-Conversational.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ocj8GI9imtka4v_Trut2x0Y45MT-utfM

### Installation
"""

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# import os
# if "COLAB_" not in "".join(os.environ.keys()):
#     !pip install unsloth
# else:
#     # Do this only in Colab and Kaggle notebooks! Otherwise use pip install unsloth
#     !pip install --no-deps bitsandbytes accelerate xformers==0.0.29 peft trl triton
#     !pip install --no-deps cut_cross_entropy unsloth_zoo
#     !pip install sentencepiece protobuf datasets huggingface_hub hf_transfer
#     !pip install --no-deps unsloth

from google.colab import drive
drive.mount('/content/drive')

"""### Unsloth"""

from unsloth import FastLanguageModel
import torch
max_seq_length = 2048 # Choose any! We auto support RoPE Scaling internally!
dtype = None # None for auto detection. Float16 for Tesla T4, V100, Bfloat16 for Ampere+
load_in_4bit = True # Use 4bit quantization to reduce memory usage. Can be False.

# 4bit pre quantized models we support for 4x faster downloading + no OOMs.
fourbit_models = [
    "unsloth/Meta-Llama-3.1-8B-bnb-4bit",      # Llama-3.1 2x faster
    "unsloth/Meta-Llama-3.1-8B-Instruct-bnb-4bit",
    "unsloth/Meta-Llama-3.1-70B-bnb-4bit",
    "unsloth/Meta-Llama-3.1-405B-bnb-4bit",    # 4bit for 405b!
    "unsloth/Mistral-Small-Instruct-2409",     # Mistral 22b 2x faster!
    "unsloth/mistral-7b-instruct-v0.3-bnb-4bit",
    "unsloth/Phi-3.5-mini-instruct",           # Phi-3.5 2x faster!
    "unsloth/Phi-3-medium-4k-instruct",
    "unsloth/gemma-2-9b-bnb-4bit",
    "unsloth/gemma-2-27b-bnb-4bit",            # Gemma 2x faster!

    "unsloth/Llama-3.2-1B-bnb-4bit",           # NEW! Llama 3.2 models
    "unsloth/Llama-3.2-1B-Instruct-bnb-4bit",
    "unsloth/Llama-3.2-3B-bnb-4bit",
    "unsloth/Llama-3.2-3B-Instruct-bnb-4bit",

    "unsloth/Llama-3.3-70B-Instruct-bnb-4bit" # NEW! Llama 3.3 70B!
] # More models at https://huggingface.co/unsloth

model, tokenizer = FastLanguageModel.from_pretrained(
    model_name = "unsloth/Llama-3.2-3B-Instruct", # or choose "unsloth/Llama-3.2-1B-Instruct"
    max_seq_length = max_seq_length,
    dtype = dtype,
    load_in_4bit = load_in_4bit,
    # token = "hf_...", # use one if using gated models like meta-llama/Llama-2-7b-hf
)

"""We now add LoRA adapters so we only need to update 1 to 10% of all parameters!"""

model = FastLanguageModel.get_peft_model(
    model,
    r = 16, # Choose any number > 0 ! Suggested 8, 16, 32, 64, 128
    target_modules = ["q_proj", "k_proj", "v_proj", "o_proj",
                      "gate_proj", "up_proj", "down_proj",],
    lora_alpha = 16,
    lora_dropout = 0, # Supports any, but = 0 is optimized
    bias = "none",    # Supports any, but = "none" is optimized
    # [NEW] "unsloth" uses 30% less VRAM, fits 2x larger batch sizes!
    use_gradient_checkpointing = "unsloth", # True or "unsloth" for very long context
    random_state = 3407,
    use_rslora = False,  # We support rank stabilized LoRA
    loftq_config = None, # And LoftQ
)

from unsloth.chat_templates import get_chat_template

tokenizer = get_chat_template(
    tokenizer,
    chat_template = "llama-3.1",
)

def formatting_prompts_func(examples):
    convos = examples["conversations"]
    texts = [tokenizer.apply_chat_template(convo, tokenize = False, add_generation_prompt = False) for convo in convos]
    return { "text" : texts, }
pass

# Import necessary libraries
import json
from datasets import Dataset
from unsloth.chat_templates import get_chat_template, standardize_sharegpt
from transformers import AutoTokenizer

# File path
json_file_path = "/content/drive/MyDrive/ACADEMICS/FYP/4. Implementation/Datasets/SynthDataset for FTing/cleaned_cbt_therapy_dataset.json"

# Load JSON and convert to list of dictionaries
def load_json_to_dict(filepath):
    with open(filepath, 'r', encoding='utf-8') as f:
        data = json.load(f)

    processed_data = []
    for conversation in data:
        if "conversations" in conversation and isinstance(conversation["conversations"], list):
            # Ensure conversation is not empty
            if len(conversation["conversations"]) == 0:
                continue

            # Rename "therapist" role to "assistant" for compatibility
            conversations = [
                {"role": "assistant" if message["role"] == "therapist" else message["role"],
                 "content": message["content"]}
                for message in conversation["conversations"]
            ]
            processed_data.append({"conversations": conversations})

    return processed_data

# Step 1: Load and process the dataset
data = load_json_to_dict(json_file_path)

# Step 2: Convert to HuggingFace Dataset
dataset = Dataset.from_list(data)

# Step 3: Standardize the Dataset
dataset = standardize_sharegpt(dataset, aliases_for_assistant=["assistant", "therapist"])

# Step 4: Initialize Tokenizer and Configure Chat Template
tokenizer = AutoTokenizer.from_pretrained("unsloth/Llama-3.2-1B-Instruct")  # Adjust model if needed
chat_template = get_chat_template(tokenizer, chat_template="llama-3.1")

def formatting_prompts_func(examples):
    texts = []

    for conversations in examples["conversations"]:
        # Ensure conversation is valid before applying template
        if not isinstance(conversations, list) or len(conversations) == 0:
            texts.append("")  # Append empty string for consistency
            continue

        formatted_text = chat_template.apply_chat_template(
            conversations,
            tokenize=False,
            add_generation_prompt=False
        )
        texts.append(formatted_text)

    return {"text": texts}

# Apply formatting to the dataset
dataset = dataset.map(formatting_prompts_func, batched=True, remove_columns=["conversations"])

# Final Output
print("Dataset has been processed and is ready for fine-tuning.")
#dataset = load_dataset("mlabonne/FineTome-100k", split = "train")

from unsloth.chat_templates import get_chat_template

tokenizer = get_chat_template(
    tokenizer,
    chat_template = "llama-3.1",
)

def formatting_prompts_func(examples):
    convos = examples["conversations"]
    texts = [tokenizer.apply_chat_template(convo, tokenize = False, add_generation_prompt = False) for convo in convos]
    return { "text" : texts, }
pass

# Import necessary libraries
import json
from datasets import Dataset
from unsloth.chat_templates import get_chat_template, standardize_sharegpt
from transformers import AutoTokenizer

# File path
json_file_path = "/content/drive/MyDrive/ACADEMICS/FYP/4. Implementation/Datasets/SynthDataset for FTing/cleaned_cbt_therapy_dataset.json"

# Load JSON and convert to list of dictionaries
def load_json_to_dict(filepath):
    with open(filepath, 'r', encoding='utf-8') as f:
        data = json.load(f)

    processed_data = []
    for conversation in data:
        if "conversations" in conversation and isinstance(conversation["conversations"], list):
            if len(conversation["conversations"]) == 0:
                continue  # Skip empty conversations

            # Ensure renaming of roles: therapist -> assistant
            conversations = [
                {"role": "assistant" if message["role"] == "therapist" else message["role"],
                 "content": message["content"]}
                for message in conversation["conversations"]
            ]
            processed_data.append({"conversations": conversations})

    return processed_data

# Step 1: Load and process the dataset
data = load_json_to_dict(json_file_path)

# Ensure data is valid before conversion
if len(data) == 0:
    raise ValueError("Error: No valid data found in JSON. Check the dataset structure.")

# Step 2: Convert to Hugging Face Dataset
dataset = Dataset.from_list(data)

# **Ensure 'conversations' exists before standardization**
if "conversations" not in dataset.column_names:
    raise KeyError("Error: 'conversations' column is missing from dataset. Check preprocessing steps.")

# Step 3: Standardize the Dataset (Ensuring therapist -> assistant)
dataset = standardize_sharegpt(dataset, aliases_for_assistant=["assistant", "therapist"])

# Step 4: Initialize Tokenizer and Configure Chat Template
tokenizer = AutoTokenizer.from_pretrained("unsloth/Llama-3.2-1B-Instruct")  # Adjust model if needed
chat_template = get_chat_template(tokenizer, chat_template="llama-3.1")

def formatting_prompts_func(examples):
    texts = []

    for conversations in examples["conversations"]:
        if not isinstance(conversations, list) or len(conversations) == 0:
            texts.append("")  # Ensure consistency
            continue

        formatted_text = chat_template.apply_chat_template(
            conversations,
            tokenize=False,
            add_generation_prompt=False
        )
        texts.append(formatted_text)

    return {"text": texts}

# Apply formatting to the dataset
formatted_dataset = dataset.map(formatting_prompts_func, batched=True, remove_columns=["conversations"])

# Final Output
print("Dataset has been processed and is ready for fine-tuning.")

from unsloth.chat_templates import standardize_sharegpt
dataset = standardize_sharegpt(dataset)
dataset = dataset.map(formatting_prompts_func, batched = True,)

print(dataset)

dataset[5]["text"]

from trl import SFTTrainer
from transformers import TrainingArguments, DataCollatorForSeq2Seq
from unsloth import is_bfloat16_supported

trainer = SFTTrainer(
    model = model,
    tokenizer = tokenizer,
    train_dataset = dataset,
    dataset_text_field = "text",
    max_seq_length = max_seq_length,
    data_collator = DataCollatorForSeq2Seq(tokenizer = tokenizer),
    dataset_num_proc = 2,
    packing = False, # Can make training 5x faster for short sequences.
    args = TrainingArguments(
        per_device_train_batch_size = 2,
        gradient_accumulation_steps = 4,
        warmup_steps = 5,
        # num_train_epochs = 1, # Set this for 1 full training run.
        max_steps = 60,
        learning_rate = 2e-4, #1e-5, 2e-4
        fp16 = not is_bfloat16_supported(),
        bf16 = is_bfloat16_supported(),
        logging_steps = 1,
        optim = "adamw_8bit",
        weight_decay = 0.01,
        lr_scheduler_type = "linear",
        seed = 3407,
        output_dir = "outputs",
        report_to = "none", # Use this for WandB etc
    ),
)

"""We verify masking is actually done:"""

from unsloth.chat_templates import train_on_responses_only
trainer = train_on_responses_only(
    trainer,
    instruction_part = "<|start_header_id|>user<|end_header_id|>\n\n",
    response_part = "<|start_header_id|>assistant<|end_header_id|>\n\n",
)

space = tokenizer(" ", add_special_tokens = False).input_ids[0]
tokenizer.decode([space if x == -100 else x for x in trainer.train_dataset[5]["labels"]])

"""We can see the System and Instruction prompts are successfully masked!"""

# @title Show current memory stats
gpu_stats = torch.cuda.get_device_properties(0)
start_gpu_memory = round(torch.cuda.max_memory_reserved() / 1024 / 1024 / 1024, 3)
max_memory = round(gpu_stats.total_memory / 1024 / 1024 / 1024, 3)
print(f"GPU = {gpu_stats.name}. Max memory = {max_memory} GB.")
print(f"{start_gpu_memory} GB of memory reserved.")

trainer_stats = trainer.train()

# @title Show final memory and time stats
used_memory = round(torch.cuda.max_memory_reserved() / 1024 / 1024 / 1024, 3)
used_memory_for_lora = round(used_memory - start_gpu_memory, 3)
used_percentage = round(used_memory / max_memory * 100, 3)
lora_percentage = round(used_memory_for_lora / max_memory * 100, 3)
print(f"{trainer_stats.metrics['train_runtime']} seconds used for training.")
print(
    f"{round(trainer_stats.metrics['train_runtime']/60, 2)} minutes used for training."
)
print(f"Peak reserved memory = {used_memory} GB.")
print(f"Peak reserved memory for training = {used_memory_for_lora} GB.")
print(f"Peak reserved memory % of max memory = {used_percentage} %.")
print(f"Peak reserved memory for training % of max memory = {lora_percentage} %.")

"""<a name="Inference"></a>
### Inference
Let's run the model! You can change the instruction and input - leave the output blank!

**[NEW] Try 2x faster inference in a free Colab for Llama-3.1 8b Instruct [here](https://colab.research.google.com/drive/1T-YBVfnphoVc8E2E854qF3jdia2Ll2W2?usp=sharing)**

We use `min_p = 0.1` and `temperature = 1.5`. Read this [Tweet](https://x.com/menhguin/status/1826132708508213629) for more information on why.
"""

from unsloth.chat_templates import get_chat_template

tokenizer = get_chat_template(
    tokenizer,
    chat_template = "llama-3.1",
)
FastLanguageModel.for_inference(model) # Enable native 2x faster inference

messages = [
    {"role": "user", "content": "I am feeling really stressed lately because of a project i am working on"},
]
inputs = tokenizer.apply_chat_template(
    messages,
    tokenize = True,
    add_generation_prompt = True, # Must add for generation
    return_tensors = "pt",
).to("cuda")

outputs = model.generate(input_ids = inputs, max_new_tokens = 64, use_cache = True,
                         temperature = 1.5, min_p = 0.1)
tokenizer.batch_decode(outputs)

""" You can also use a `TextStreamer` for continuous inference - so you can see the generation token by token, instead of waiting the whole time!"""

FastLanguageModel.for_inference(model) # Enable native 2x faster inference

messages = [
    {"role": "user", "content": "Continue the fibonnaci sequence: 1, 1, 2, 3, 5, 8,"},
]
inputs = tokenizer.apply_chat_template(
    messages,
    tokenize = True,
    add_generation_prompt = True, # Must add for generation
    return_tensors = "pt",
).to("cuda")

from transformers import TextStreamer
text_streamer = TextStreamer(tokenizer, skip_prompt = True)
_ = model.generate(input_ids = inputs, streamer = text_streamer, max_new_tokens = 128,
                   use_cache = True, temperature = 1.5, min_p = 0.1)

"""<a name="Save"></a>
### Saving, loading finetuned models
To save the final model as LoRA adapters, either use Huggingface's `push_to_hub` for an online save or `save_pretrained` for a local save.

**[NOTE]** This ONLY saves the LoRA adapters, and not the full model. To save to 16bit or GGUF, scroll down!
"""

model.push_to_hub_merged(
       "rikzyj/CBT_Therapist_LLMA3_2_3B",  # Replace with your Hugging Face username/model_id
       tokenizer,
       save_method="merged_16bit",
       token="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"  # Replace with your Hugging Face token
   )

from huggingface_hub import HfApi

# Assuming 'model' is your fine-tuned model and 'tokenizer' is your tokenizer
api = HfApi()

# Save the model and tokenizer locally using SafeTensors
model.save_pretrained("my_model", safe_serialization=True)
tokenizer.save_pretrained("my_model", safe_serialization=True)

# Create a new repository on Hugging Face
api.create_repo(repo_id="rikzyj/CBT_Therapist_LLMA3_2_1B_SafeTensors",
                repo_type="model",
                private=False,
                token="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")

# Push the SafeTensors files to the new repository
api.upload_folder(
    folder_path="my_model",
    repo_id="rikzyj/CBT_Therapist_LLMA3_2_1B_SafeTensors",  # New repo ID
    repo_type="model",
    token="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"  # Your Hugging Face token
)

model.save_pretrained("lora_model")  # Local saving
tokenizer.save_pretrained("lora_model")
model.push_to_hub("rikzyj/CBT_Therapist_LLMA3_2_1B", token = "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") # Online saving
# tokenizer.push_to_hub("your_name/lora_model", token = "...") # Online saving

"""Now if you want to load the LoRA adapters we just saved for inference, set `False` to `True`:"""

if False:
    from unsloth import FastLanguageModel
    model, tokenizer = FastLanguageModel.from_pretrained(
        model_name = "lora_model", # YOUR MODEL YOU USED FOR TRAINING
        max_seq_length = max_seq_length,
        dtype = dtype,
        load_in_4bit = load_in_4bit,
    )
    FastLanguageModel.for_inference(model) # Enable native 2x faster inference

messages = [
    {"role": "user", "content": "Describe a tall tower in the capital of France."},
]
inputs = tokenizer.apply_chat_template(
    messages,
    tokenize = True,
    add_generation_prompt = True, # Must add for generation
    return_tensors = "pt",
).to("cuda")

from transformers import TextStreamer
text_streamer = TextStreamer(tokenizer, skip_prompt = True)
_ = model.generate(input_ids = inputs, streamer = text_streamer, max_new_tokens = 128,
                   use_cache = True, temperature = 1.5, min_p = 0.1)

"""You can also use Hugging Face's `AutoModelForPeftCausalLM`. Only use this if you do not have `unsloth` installed. It can be hopelessly slow, since `4bit` model downloading is not supported, and Unsloth's **inference is 2x faster**."""

if False:
    # I highly do NOT suggest - use Unsloth if possible
    from peft import AutoPeftModelForCausalLM
    from transformers import AutoTokenizer
    model = AutoPeftModelForCausalLM.from_pretrained(
        "lora_model", # YOUR MODEL YOU USED FOR TRAINING
        load_in_4bit = load_in_4bit,
    )
    tokenizer = AutoTokenizer.from_pretrained("lora_model")

"""### Saving to float16 for VLLM

We also support saving to `float16` directly. Select `merged_16bit` for float16 or `merged_4bit` for int4. We also allow `lora` adapters as a fallback. Use `push_to_hub_merged` to upload to your Hugging Face account! You can go to https://huggingface.co/settings/tokens for your personal tokens.
"""

# Merge to 16bit
if False: model.save_pretrained_merged("model", tokenizer, save_method = "merged_16bit",)
if False: model.push_to_hub_merged("hf/model", tokenizer, save_method = "merged_16bit", token = "")

# Merge to 4bit
if False: model.save_pretrained_merged("model", tokenizer, save_method = "merged_4bit",)
if False: model.push_to_hub_merged("hf/model", tokenizer, save_method = "merged_4bit", token = "")

# Just LoRA adapters
if False: model.save_pretrained_merged("model", tokenizer, save_method = "lora",)
if False: model.push_to_hub_merged("hf/model", tokenizer, save_method = "lora", token = "")

"""### GGUF / llama.cpp Conversion
To save to `GGUF` / `llama.cpp`, we support it natively now! We clone `llama.cpp` and we default save it to `q8_0`. We allow all methods like `q4_k_m`. Use `save_pretrained_gguf` for local saving and `push_to_hub_gguf` for uploading to HF.

Some supported quant methods (full list on our [Wiki page](https://github.com/unslothai/unsloth/wiki#gguf-quantization-options)):
* `q8_0` - Fast conversion. High resource use, but generally acceptable.
* `q4_k_m` - Recommended. Uses Q6_K for half of the attention.wv and feed_forward.w2 tensors, else Q4_K.
* `q5_k_m` - Recommended. Uses Q6_K for half of the attention.wv and feed_forward.w2 tensors, else Q5_K.

[**NEW**] To finetune and auto export to Ollama, try our [Ollama notebook](https://colab.research.google.com/drive/1WZDi7APtQ9VsvOrQSSC5DDtxq159j8iZ?usp=sharing)
"""

# Save to 8bit Q8_0
if False: model.save_pretrained_gguf("model", tokenizer,)
# Remember to go to https://huggingface.co/settings/tokens for a token!
# And change hf to your username!
if False: model.push_to_hub_gguf("hf/model", tokenizer, token = "")

# Save to 16bit GGUF
if False: model.save_pretrained_gguf("model", tokenizer, quantization_method = "f16")
if False: model.push_to_hub_gguf("hf/model", tokenizer, quantization_method = "f16", token = "")

# Save to q4_k_m GGUF
if False: model.save_pretrained_gguf("model", tokenizer, quantization_method = "q4_k_m")
if False: model.push_to_hub_gguf("hf/model", tokenizer, quantization_method = "q4_k_m", token = "")

# Save to multiple GGUF options - much faster if you want multiple!
if False:
    model.push_to_hub_gguf(
        "hf/model", # Change hf to your username!
        tokenizer,
        quantization_method = ["q4_k_m", "q8_0", "q5_k_m",],
        token = "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", # Get a token at https://huggingface.co/settings/tokens
    )